---
interface Props {
  first?: boolean
  last?: boolean
  // description: string
  validated?: boolean
  level?: 0 | 1 | 2
  index: number
  htmlRaw: string
  cssRaw: string
}

const {
  first = false,
  last = false,
  level = 0,
  validated = false,
  index,
  // description,
  htmlRaw,
  cssRaw
} = Astro.props

const htmlSnippet = htmlRaw.replace(
  /<link rel="stylesheet" href="styles.css" \/>/,
  `<style>${cssRaw}</style>`
)

import { Layout } from '@component/global'
import DESCRIPTIONS from './descriptions'
---

<style>
  section {
    overflow: auto;
    scrollbar-color: #333333 #111111;
    scrollbar-width: thin;
  }
</style>

<Layout title=`Día ${+index} - 30 días de HTML`>
  <main class='flex h-[100dvh] w-screen flex-col md:flex-row'>
    <section
      class='md:max-w-screen relative h-2/5 resize-x overflow-scroll p-4 text-white md:h-[100dvh] md:w-2/5'
    >
      <button
        onclick='window.location.href = "/"'
        type='button'
        class='absolute right-1 top-2 inline-flex items-center rounded-lg bg-gradient-to-r from-teal-500
          to-blue-500 px-2 py-1 text-center text-sm font-bold
          text-white hover:bg-gradient-to-bl focus:outline-none
          focus:ring-4 focus:ring-teal-300 dark:focus:ring-teal-800'
      >
        <span>Volver</span>
      </button>
      <h1 class='text-2xl font-bold'>
        Día {+index}
      </h1>
      <p class='mb-2 flex'>
        {DESCRIPTIONS[index]}
      </p>
      <!-- <h2
        data-easy={level === 0}
        data-medium={level === 1}
        data-hard={level === 2}
        class='mt-2 text-base font-bold data-[easy]:text-green-300 data-[hard]:text-red-300 data-[medium]:text-orange-300'
      >
        Dificultad: {level === 0 ? 'Fácil' : level === 1 ? 'Medio' : 'Difícil'}
      </h2> -->
      <span
        data-easy={level === 0}
        data-medium={level === 1}
        data-hard={level === 2}
        class='mt-4 rounded-full bg-pink-100 px-2.5 py-0.5 text-xs font-bold text-pink-800 data-[easy]:bg-green-100 data-[hard]:bg-red-100 data-[medium]:bg-orange-100 data-[easy]:text-green-800 data-[hard]:text-red-800 data-[medium]:text-orange-800 dark:bg-pink-900 dark:text-pink-300'
      >
        Dificultad: {level === 0 ? 'Fácil' : level === 1 ? 'Medio' : 'Difícil'}
      </span>
      {
        validated ? (
          <span class='ml-2 rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-bold text-green-800 dark:bg-green-900 dark:text-green-300'>
            Validado
          </span>
        ) : null
      }
      <h2 class='mt-2 text-xl font-bold'>Soluciones</h2>
      <h3 class='w-full text-center italic'>index.html</h3>
      <pre
        class='relative overflow-x-auto rounded-md bg-gray-800 px-2 text-xs'>
        <button id='copy-html' type='button' class='inline-flex items-center rounded-lg bg-gradient-to-r from-teal-500 absolute left-1 top-1.5
          to-emerald-500 px-2 py-1 text-center text-sm font-bold
          text-white hover:bg-gradient-to-bl focus:outline-none
          focus:ring-4 focus:ring-teal-300 dark:focus:ring-teal-800'>
        <span>copy code</span>
      </button>
        <code class='language-html' data-lang='html'>{`\n${htmlRaw}`}</code>
      </pre>
      <h3 class='w-full text-center italic'>styles.css</h3>
      <pre
        class='relative mb-2 overflow-x-auto rounded-md bg-gray-800 px-2 text-xs'>
        <button id='copy-css' type='button' class='inline-flex items-center rounded-lg bg-gradient-to-r from-teal-500 absolute left-1 top-1.5
          to-emerald-500 px-2 py-1 text-center text-sm font-bold
          text-white hover:bg-gradient-to-bl focus:outline-none
          focus:ring-4 focus:ring-teal-300 dark:focus:ring-teal-800'>
        <span>copy code</span>
      </button>
        <code class='language-css' data-lang='css'>{`\n${cssRaw}`}</code>
      </pre>
      <footer
        class='sticky bottom-0 flex w-full flex-row-reverse justify-between'
      >
        <button
          type='button'
          data-last={last}
          onclick={`window.location.href='/retos/${index + 1}'`}
          class='-mb-2 -mr-2 inline-flex items-center rounded-lg bg-gradient-to-br from-purple-600 to-blue-500 px-2 py-1 text-center text-sm font-medium text-white shadow-lg shadow-black hover:bg-gradient-to-bl focus:outline-none focus:ring-4 focus:ring-blue-300 data-[last]:hidden dark:focus:ring-blue-800'
        >
          <svg
            class='h-3.5 w-3.5 rtl:rotate-180'
            aria-hidden='true'
            xmlns='http://www.w3.org/2000/svg'
            fill='none'
            viewBox='0 0 14 10'
          >
            <path
              stroke='currentColor'
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M1 5h12m0 0L9 1m4 4L9 9'></path>
          </svg>
        </button>
        <button
          data-first={first}
          type='button'
          onclick={`window.location.href='/retos/${index - 1}'`}
          class='-mb-2 -ml-2 inline-flex items-center rounded-lg bg-gradient-to-br from-purple-600 to-blue-500 px-2 py-1 text-center text-sm font-medium text-white shadow-lg shadow-black hover:bg-gradient-to-bl focus:outline-none focus:ring-4 focus:ring-blue-300 data-[first]:hidden dark:focus:ring-blue-800'
        >
          <svg
            class='h-3.5 w-3.5 rotate-180 rtl:rotate-180'
            aria-hidden='true'
            xmlns='http://www.w3.org/2000/svg'
            fill='none'
            viewBox='0 0 14 10'
          >
            <path
              stroke='currentColor'
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M1 5h12m0 0L9 1m4 4L9 9'></path>
          </svg>
        </button>
      </footer>
    </section>
    <section class='relative flex h-3/5 grow flex-col md:h-[100dvh] md:w-3/5'>
      <span
        class='absolute right-2 top-2 me-2 rounded-full bg-pink-100 px-2.5 py-0.5 text-xs font-bold text-pink-800 dark:bg-pink-900 dark:text-pink-300'
      >
        Demo
      </span>
      <iframe class='grow' srcdoc={htmlSnippet}></iframe>
    </section>
  </main>
  <script>
    import { toast } from 'wc-toast'
    document.getElementById('copy-html').addEventListener('click', () => {
      const html = document.querySelector('code[data-lang="html"]').textContent
      navigator.clipboard.writeText(html)
      toast('Código HTML copiado ⛵', { duration: 2000 })
    })
    document.getElementById('copy-css').addEventListener('click', () => {
      const css = document.querySelector('code[data-lang="css"]').textContent
      navigator.clipboard.writeText(css)
      toast('Código CSS copiado ⛵', { duration: 2000 })
    })
  </script>
</Layout>
